# External imports
import json

# Import basic preliminaries
from sic_framework.core.sic_application import SICApplication
from sic_framework.core import sic_logging

# Import the device(s) we will be using
from sic_framework.devices import Pepper

# Import message types and requests
from sic_framework.devices.common_naoqi.naoqi_autonomous import (
    NaoWakeUpRequest,
    NaoRestRequest,
)
from sic_framework.devices.common_naoqi.naoqi_motion_recorder import (
    NaoqiMotionRecorderConf,
    NaoqiMotionRecording,
    PlayRecording,
)
from sic_framework.devices.common_naoqi.naoqi_stiffness import Stiffness

# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
# Configuration
# ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
CHAIN = ["Head", "LArm", "RArm"]
MOTION_JSON_FILE = "pepper_motion_nod.json"
ROBOT_IP = "XXX"

# ─────────────────────────────────────────────────────────────────────────────
# Motion Replay Application
# ─────────────────────────────────────────────────────────────────────────────
class PepperMotionReplayDemo(SICApplication):
    """
    Pepper motion replay demo application.
    
    Demonstrates how to replay a motion by loading a JSON file generated by Choregraphe.
    The motion data includes joint names, angles, and timing information.
    
    Usage:
        python demo_pepper_motion_json_replay.py
    
    Features:
    - Loads motion from JSON file
    - Processes motion data with precision factors
    - Replays motion on Pepper robot
    - Manages stiffness during replay
    - Safe cleanup after motion completes
    """
    
    def __init__(self):
        # Call parent constructor (handles singleton initialization)
        super(PepperMotionReplayDemo, self).__init__()
        
        # Demo-specific configuration
        self.robot_ip = ROBOT_IP
        self.motion_json_file = MOTION_JSON_FILE
        self.chain = CHAIN
        
        # Robot instance
        self.pepper = None
        self.recording = None
        
        self.set_log_level(sic_logging.INFO)
        
        # Log files will only be written if set_log_file is called. Must be a valid full path to a directory.
        # self.set_log_file("/Users/apple/Desktop/SAIL/SIC_Development/sic_applications/demos/pepper/logs")
        
        self.setup()
    
    def setup(self):
        """Initialize and configure Pepper robot for motion replay."""
        self.logger.info("Starting Pepper Motion Replay Demo...")
        
        # Initialize Pepper with motion recorder configuration
        self.logger.info("Connecting to Pepper at {}...".format(self.robot_ip))
        conf = NaoqiMotionRecorderConf(use_sensors=True)
        self.pepper = Pepper(self.robot_ip, motion_record_conf=conf)
        
        # Wake up the robot
        self.logger.info("Waking up robot...")
        self.pepper.autonomous.request(NaoWakeUpRequest())
        
        # Load motion from JSON file
        self.logger.info("Loading motion from {}...".format(self.motion_json_file))
        self._load_motion_from_json()
        
        self.logger.info("Robot initialized and motion loaded successfully")
    
    def _load_motion_from_json(self):
        """Load and process motion JSON file."""
        try:
            with open(self.motion_json_file, "r") as f:
                data = json.load(f)
            
            recorded_joints = []
            recorded_angles = []
            recorded_times = []
            precision_factor_angles = data["precision_factor_angles"]
            precision_factor_times = data["precision_factor_times"]
            
            for joint, values in data["motion"].items():
                recorded_joints.append(joint)
                recorded_angles.append([a / precision_factor_angles for a in values["angles"]])
                recorded_times.append([t / precision_factor_times for t in values["times"]])
            
            # Wrap the data in a NaoqiMotionRecording object
            self.recording = NaoqiMotionRecording(recorded_joints, recorded_angles, recorded_times)
            
            self.logger.info("Motion loaded: {} joints, {} keyframes".format(
                len(recorded_joints), len(recorded_angles[0]) if recorded_angles else 0
            ))
            
        except FileNotFoundError:
            self.logger.error("Motion file not found: {}".format(self.motion_json_file))
            raise
        except Exception as e:
            self.logger.error("Error loading motion file: {}".format(e))
            raise
    
    def run(self):
        """Main application logic."""
        try:
            self.logger.info("Starting motion replay...")
            
            # Enable stiffness for replay
            self.logger.info("Enabling stiffness for chains: {}".format(self.chain))
            self.pepper.stiffness.request(
                Stiffness(stiffness=0.7, joints=self.chain, enable_joint_list_generation=False)
            )
            
            # Replay the motion
            self.logger.info("Replaying motion...")
            self.pepper.motion_record.request(PlayRecording(self.recording))
            
            self.logger.info("Finished replaying motion")
            
        except KeyboardInterrupt:
            self.logger.info("Interrupt received. Stopping motion...")
        except Exception as e:
            self.logger.error("Error during motion replay: {}".format(e))
        finally:
            self.shutdown()
    
    def shutdown(self):
        """Clean shutdown - disable stiffness and put robot to rest."""
        self.logger.info("Shutting down motion replay demo...")
        
        try:
            # Disable stiffness after replay
            self.logger.info("Disabling stiffness...")
            self.pepper.stiffness.request(
                Stiffness(stiffness=0.0, joints=self.chain, enable_joint_list_generation=False)
            )
            
            # Put robot to rest
            self.logger.info("Putting robot to rest...")
            self.pepper.autonomous.request(NaoRestRequest())
            
            self.logger.info("Motion replay demo complete")
            
        except Exception as e:
            self.logger.error("Error during shutdown: {}".format(e))


# ─────────────────────────────────────────────────────────────────────────────
# Script entry point
# ─────────────────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    # Create and run the demo
    demo = PepperMotionReplayDemo()
    demo.run()
