# Import basic preliminaries
from sic_framework.core.sic_application import SICApplication
from sic_framework.core import sic_logging

# Import the device(s) we will be using
from sic_framework.devices import Pepper

# Import message types and requests
from sic_framework.devices.common_naoqi.naoqi_autonomous import NaoWakeUpRequest
from sic_framework.devices.common_naoqi.naoqi_motion_recorder import (
    NaoqiMotionRecorderConf,
    NaoqiMotionRecording,
    PlayRecording,
)
from sic_framework.devices.common_naoqi.naoqi_stiffness import Stiffness

# Import libraries necessary for the demo
import json


class PepperMotionJSONReplayDemo(SICApplication):
    """
    Pepper motion JSON replay demo application.
    Demonstrates how to replay a motion by loading a JSON file generated by Choregraphe.
    """
    
    def __init__(self):
        # Call parent constructor (handles singleton initialization)
        super(PepperMotionJSONReplayDemo, self).__init__()
        
        # Demo-specific initialization
        self.pepper_ip = "XXX"
        self.motion_json_file = "pepper_motion_nod.json"
        self.chain = ["Head", "LArm", "RArm"]
        self.pepper = None
        
        # Log files will only be written if set_log_file is called. Must be a valid full path to a directory.
        # self.set_log_file("/Users/apple/Desktop/SAIL/SIC_Development/sic_applications/demos/pepper/logs")

        self.set_log_level(sic_logging.INFO)
        
        self.setup()
    
    def setup(self):
        """Initialize and configure the Pepper robot."""
        self.logger.info("Starting Pepper Motion JSON Replay Demo...")
        
        # Initialize Pepper with motion recorder configuration
        conf = NaoqiMotionRecorderConf(use_sensors=True)
        self.pepper = Pepper(self.pepper_ip, motion_record_conf=conf)
        
        # Wake up the robot
        self.logger.info("Waking up Pepper...")
        self.pepper.autonomous.request(NaoWakeUpRequest())
    
    def run(self):
        """Main application logic."""
        try:
            # Load and process motion JSON file
            self.logger.info("Loading motion from JSON file: {}".format(self.motion_json_file))
            with open(self.motion_json_file, "r") as f:
                data = json.load(f)
            
            recorded_joints = []
            recorded_angles = []
            recorded_times = []
            precision_factor_angles = data["precision_factor_angles"]
            precision_factor_times = data["precision_factor_times"]
            
            for joint, values in data["motion"].items():
                recorded_joints.append(joint)
                recorded_angles.append([a / precision_factor_angles for a in values["angles"]])
                recorded_times.append([t / precision_factor_times for t in values["times"]])
            
            # Wrap the data in a NaoqiMotionRecording object
            recording = NaoqiMotionRecording(recorded_joints, recorded_angles, recorded_times)
            
            # Replay the motion
            self.logger.info("Replaying action")
            
            # Enable stiffness for replay
            self.pepper.stiffness.request(
                Stiffness(stiffness=0.7, joints=self.chain, enable_joint_list_generation=False)
            )
            
            self.pepper.motion_record.request(PlayRecording(recording))
            
            self.logger.info("Finished replaying action")
            
            # Disable stiffness after replay
            self.pepper.stiffness.request(
                Stiffness(stiffness=0.0, joints=self.chain, enable_joint_list_generation=False)
            )
            
            self.logger.info("Motion replay demo completed successfully")
        except Exception as e:
            self.logger.error("Exception: {}".format(e))
        finally:
            self.shutdown()


if __name__ == "__main__":
    # Create and run the demo
    demo = PepperMotionJSONReplayDemo()
    demo.run()

